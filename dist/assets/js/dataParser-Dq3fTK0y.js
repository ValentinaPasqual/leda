const u="/Atlas/";async function f(){try{const s=await(await fetch(`${u}/config/map-config.json`)).json();return console.log("Loaded configuration:",s),s}catch(t){throw console.error("Error loading configuration:",t),t}}const g="/Atlas/",l={config:{datasetConfig:{multivalue_rows:{}}},async init(){try{const t=await f();return t?(this.config=t,this.config.datasetConfig?this.config.datasetConfig.multivalue_rows||(this.config.datasetConfig.multivalue_rows={}):this.config.datasetConfig={multivalue_rows:{}}):console.warn("loadConfiguration returned undefined or null, using default config"),this}catch(t){return console.error("Error loading configuration:",t),console.warn("Using default configuration due to error"),this}},async parseData(){try{const s=await(await fetch(`${g}/data/data.tsv`)).text(),r=this.parseTsvToJson(s);return this.processMultivalueFields(r)}catch(t){return console.error("Error in parseData:",t),[]}},processMultivalueFields(t){var r,i;const s=((i=(r=this.config)==null?void 0:r.datasetConfig)==null?void 0:i.multivalue_rows)||{};return t.forEach(a=>{Object.keys(s).forEach(o=>{if(a[o]&&typeof a[o]=="string"){const n=s[o];a[o]=a[o].split(n).map(c=>c.trim())}})}),t},parseTsvToJson(t){const s=t.trim().split(`
`),r=s[0].split("	");return s.slice(1).map(i=>{const a=i.split("	"),o={};return r.forEach((n,c)=>{if(c<a.length&&a[c]!==""){const e=a[c];e.toLowerCase()==="true"?o[n]=!0:e.toLowerCase()==="false"?o[n]=!1:!isNaN(e)&&e.trim()!==""?o[n]=Number(e):o[n]=e}}),o})}},p=async()=>(await l.init(),l.parseData());export{f as l,p};
