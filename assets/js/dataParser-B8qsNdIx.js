import{l as w,s as m}from"./universalFooter-C2U-GN5J.js";const h="/leda/",p={config:{datasetConfig:{multivalue_rows:{},fields:{}}},async init(){try{const t=await w();return t?(this.config=t,this.config.datasetConfig?(this.config.datasetConfig.multivalue_rows||(this.config.datasetConfig.multivalue_rows={}),this.config.datasetConfig.fields||(this.config.datasetConfig.fields={})):this.config.datasetConfig={multivalue_rows:{},fields:{}}):console.warn("loadConfiguration returned undefined or null, using default config"),this}catch(t){return console.error("Error loading configuration:",t),console.warn("Using default configuration due to error"),this}},async saveConfig(){try{return await m(this.config),console.log("Configuration saved successfully with updated fields"),!0}catch(t){return console.error("Error saving configuration:",t),!1}},async parseData(){try{const[t,l]=await Promise.all([fetch(`${h}/data/references.tsv`),fetch(`${h}/data/locations.tsv`)]),[r,n]=await Promise.all([t.text(),l.text()]),s=this.parseTsvToJson(r),e=this.parseTsvToJson(n),o=s.length>0?Object.keys(s[0]):[],a=e.length>0?Object.keys(e[0]):[],i={catalogue:o,geodata:a,all:[...new Set([...o,...a])]},v=this.config.datasetConfig.fields;JSON.stringify(v)!==JSON.stringify(i)?(this.config.datasetConfig.fields=i,console.log("Dataset fields updated:",this.config.datasetConfig.fields),await this.saveConfig()?console.log("Fields permanently saved to config file"):console.warn("Failed to save fields to config file")):console.log("Fields unchanged, no need to update config file");let c=null;if(o.includes("Location")&&a.includes("Location")?c="Location":o.includes("Titolo")&&a.includes("Titolo")&&(c="Titolo"),!c)return console.warn("No common join field found. Available fields:"),console.warn("Catalogue fields:",o),console.warn("Geodata fields:",a),this.processMultivalueFields([...s,...e]);console.log(`Using "${c}" as join field`);const g=[];return e.forEach(f=>{const d=s.filter(u=>u[c]===f[c]);d.length>0?d.forEach(u=>{const C={...u,...f};g.push(C)}):g.push(f)}),this.processMultivalueFields(g)}catch(t){return console.error("Error in parseData:",t),[]}},processMultivalueFields(t){var r,n;const l=((n=(r=this.config)==null?void 0:r.datasetConfig)==null?void 0:n.multivalue_rows)||{};return t.forEach(s=>{Object.keys(l).forEach(e=>{if(s[e]&&typeof s[e]=="string"){const o=l[e];s[e]=s[e].split(o).map(a=>a.trim())}})}),t},parseTsvToJson(t){const l=t.trim().split(/\r?\n/),r=l[0].split("	").map(n=>n.trim());return l.slice(1).map(n=>{const s=n.split("	"),e={};return r.forEach((o,a)=>{if(a<s.length&&s[a]!==""){const i=s[a].replace(/\r/g,"").trim();if(i==="")return;i.toLowerCase()==="true"?e[o]=!0:i.toLowerCase()==="false"?e[o]=!1:!isNaN(i)&&i.trim()!==""?o==="Location"||o==="Titolo"?e[o]=i:e[o]=Number(i):e[o]=i}}),e})}},D=async()=>(await p.init(),p.parseData());export{D as p};
