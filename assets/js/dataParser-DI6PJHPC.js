import{l as m,s as y}from"./universalFooter-C2U-GN5J.js";const v="/leda/",w={config:{datasetConfig:{multivalue_rows:{},fields:{}}},async init(){try{const t=await m();return t?(this.config=t,this.config.datasetConfig?(this.config.datasetConfig.multivalue_rows||(this.config.datasetConfig.multivalue_rows={}),this.config.datasetConfig.fields||(this.config.datasetConfig.fields={})):this.config.datasetConfig={multivalue_rows:{},fields:{}}):console.warn("loadConfiguration returned undefined or null, using default config"),this}catch(t){return console.error("Error loading configuration:",t),console.warn("Using default configuration due to error"),this}},async saveConfig(){try{return await y(this.config),console.log("Configuration saved successfully with updated fields"),!0}catch(t){return console.error("Error saving configuration:",t),!1}},async parseData(){try{const[t,r]=await Promise.all([fetch(`${v}/data/references.tsv`),fetch(`${v}/data/locations.tsv`)]),[g,c]=await Promise.all([t.text(),r.text()]),a=this.parseTsvToJson(g),e=this.parseTsvToJson(c),o=a.length>0?Object.keys(a[0]):[],l=e.length>0?Object.keys(e[0]):[],n={catalogue:o,geodata:l,all:[...new Set([...o,...l])]},s=this.config.datasetConfig.fields;JSON.stringify(s)!==JSON.stringify(n)?(this.config.datasetConfig.fields=n,console.log("Dataset fields updated:",this.config.datasetConfig.fields),await this.saveConfig()?console.log("Fields permanently saved to config file"):console.warn("Failed to save fields to config file")):console.log("Fields unchanged, no need to update config file");let f=null;if(o.includes("Location")&&l.includes("Location")?f="Location":o.includes("Titolo")&&l.includes("Titolo")&&(f="Titolo"),!f)return console.warn("No common join field found. Available fields:"),console.warn("Catalogue fields:",o),console.warn("Geodata fields:",l),this.processMultivalueFields([...a,...e]);console.log(`Using "${f}" as join field`);const i=[];return e.forEach(u=>{const p=a.filter(h=>h[f]===u[f]);p.length>0?p.forEach(h=>{const C={...h,...u};i.push(C)}):i.push(u)}),this.processMultivalueFields(i)}catch(t){return console.error("Error in parseData:",t),[]}},processMultivalueFields(t){var g,c;const r=((c=(g=this.config)==null?void 0:g.datasetConfig)==null?void 0:c.multivalue_rows)||{};return t.forEach(a=>{Object.keys(r).forEach(e=>{if(a[e]&&typeof a[e]=="string"){const o=r[e];a[e]=a[e].split(o).map(l=>l.trim())}})}),t},parseTsvToJson(t){var e;const r=t.trim().split(/\r?\n/),g=r[0].split("	").map(o=>o.trim()),c=((e=this.config)==null?void 0:e.aggregations)||{},a=Object.keys(c).filter(o=>c[o].type!=="range");return r.slice(1).map(o=>{const l=o.split("	"),n={};return g.forEach((s,d)=>{const i=(d<l.length?l[d]:"").replace(/\r/g,"").trim();if(i===""){a.includes(s)?n[s]="Non specificato":n[s]="";return}i.toLowerCase()==="true"?n[s]=!0:i.toLowerCase()==="false"?n[s]=!1:!isNaN(i)&&i.trim()!==""?s==="Location"||s==="Titolo"?n[s]=i:n[s]=Number(i):n[s]=i}),n})}},j=async()=>(await w.init(),w.parseData());export{j as p};
